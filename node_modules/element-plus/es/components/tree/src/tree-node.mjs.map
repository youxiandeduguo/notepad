{"version":3,"file":"tree-node.mjs","sources":["../../../../../../packages/components/tree/src/tree-node.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"node.visible\"\n    ref=\"node$\"\n    :class=\"[\n      ns.b('node'),\n      ns.is('expanded', expanded),\n      ns.is('current', node.isCurrent),\n      ns.is('hidden', !node.visible),\n      ns.is('focusable', !node.disabled),\n      ns.is('checked', !node.disabled && node.checked),\n      getNodeClass(node),\n    ]\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"node.disabled\"\n    :aria-checked=\"node.checked\"\n    :draggable=\"tree.props.draggable\"\n    :data-key=\"getNodeKey(node)\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n    @dragstart.stop=\"handleDragStart\"\n    @dragover.stop=\"handleDragOver\"\n    @dragend.stop=\"handleDragEnd\"\n    @drop.stop=\"handleDrop\"\n  >\n    <div\n      :class=\"ns.be('node', 'content')\"\n      :style=\"{ paddingLeft: (node.level - 1) * tree.props.indent + 'px' }\"\n    >\n      <el-icon\n        v-if=\"tree.props.icon || CaretRight\"\n        :class=\"[\n          ns.be('node', 'expand-icon'),\n          ns.is('leaf', node.isLeaf),\n          {\n            expanded: !node.isLeaf && expanded,\n          },\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"tree.props.icon || CaretRight\" />\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"node.checked\"\n        :indeterminate=\"node.indeterminate\"\n        :disabled=\"!!node.disabled\"\n        @click.stop\n        @change=\"handleCheckChange\"\n      />\n      <el-icon\n        v-if=\"node.loading\"\n        :class=\"[ns.be('node', 'loading-icon'), ns.is('loading')]\"\n      >\n        <loading />\n      </el-icon>\n      <node-content :node=\"node\" :render-content=\"renderContent\" />\n    </div>\n    <el-collapse-transition>\n      <div\n        v-if=\"!renderAfterExpand || childNodeRendered\"\n        v-show=\"expanded\"\n        :class=\"ns.be('node', 'children')\"\n        role=\"group\"\n        :aria-expanded=\"expanded\"\n      >\n        <el-tree-node\n          v-for=\"child in node.childNodes\"\n          :key=\"getNodeKey(child)\"\n          :render-content=\"renderContent\"\n          :render-after-expand=\"renderAfterExpand\"\n          :show-checkbox=\"showCheckbox\"\n          :node=\"child\"\n          :accordion=\"accordion\"\n          :props=\"props\"\n          @node-expand=\"handleChildNodeExpand\"\n        />\n      </div>\n    </el-collapse-transition>\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  nextTick,\n  provide,\n  ref,\n  watch,\n} from 'vue'\nimport { debugWarn, isFunction, isString } from '@element-plus/utils'\nimport ElCollapseTransition from '@element-plus/components/collapse-transition'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CaretRight, Loading } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport NodeContent from './tree-node-content.vue'\nimport { getNodeKey as getNodeKeyUtil, handleCurrentChange } from './model/util'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { dragEventsKey } from './model/useDragNode'\nimport Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type { RootTreeType, TreeNodeData, TreeOptionProps } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNode',\n  components: {\n    ElCollapseTransition,\n    ElCheckbox,\n    NodeContent,\n    ElIcon,\n    Loading,\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({}),\n    },\n    props: {\n      type: Object as PropType<TreeOptionProps>,\n      default: () => ({}),\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['node-expand'],\n  setup(props, ctx) {\n    const ns = useNamespace('tree')\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n    const tree = inject<RootTreeType>('RootTree')\n    const expanded = ref(false)\n    const childNodeRendered = ref(false)\n    const oldChecked = ref<boolean>(null)\n    const oldIndeterminate = ref<boolean>(null)\n    const node$ = ref<Nullable<HTMLElement>>(null)\n    const dragEvents = inject(dragEventsKey)\n    const instance = getCurrentInstance()\n\n    provide('NodeInstance', instance)\n    if (!tree) {\n      debugWarn('Tree', \"Can not find node's tree.\")\n    }\n\n    if (props.node.expanded) {\n      expanded.value = true\n      childNodeRendered.value = true\n    }\n\n    const childrenKey = tree.props.props['children'] || 'children'\n    watch(\n      () => {\n        const children = props.node.data[childrenKey]\n        return children && [...children]\n      },\n      () => {\n        props.node.updateChildren()\n      }\n    )\n\n    watch(\n      () => props.node.indeterminate,\n      (val) => {\n        handleSelectChange(props.node.checked, val)\n      }\n    )\n\n    watch(\n      () => props.node.checked,\n      (val) => {\n        handleSelectChange(val, props.node.indeterminate)\n      }\n    )\n\n    watch(\n      () => props.node.childNodes.length,\n      () => props.node.reInitChecked()\n    )\n\n    watch(\n      () => props.node.expanded,\n      (val) => {\n        nextTick(() => (expanded.value = val))\n        if (val) {\n          childNodeRendered.value = true\n        }\n      }\n    )\n\n    const getNodeKey = (node: Node): any => {\n      return getNodeKeyUtil(tree.props.nodeKey, node.data)\n    }\n\n    const getNodeClass = (node: Node) => {\n      const nodeClassFunc = props.props.class\n      if (!nodeClassFunc) {\n        return {}\n      }\n      let className\n      if (isFunction(nodeClassFunc)) {\n        const { data } = node\n        className = nodeClassFunc(data, node)\n      } else {\n        className = nodeClassFunc\n      }\n\n      if (isString(className)) {\n        return { [className]: true }\n      } else {\n        return className\n      }\n    }\n\n    const handleSelectChange = (checked: boolean, indeterminate: boolean) => {\n      if (\n        oldChecked.value !== checked ||\n        oldIndeterminate.value !== indeterminate\n      ) {\n        tree.ctx.emit('check-change', props.node.data, checked, indeterminate)\n      }\n      oldChecked.value = checked\n      oldIndeterminate.value = indeterminate\n    }\n\n    const handleClick = (e: MouseEvent) => {\n      handleCurrentChange(tree.store, tree.ctx.emit, () =>\n        tree.store.value.setCurrentNode(props.node)\n      )\n      tree.currentNode.value = props.node\n\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick()\n      }\n\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: { checked: !props.node.checked },\n        })\n      }\n      tree.ctx.emit('node-click', props.node.data, props.node, instance, e)\n    }\n\n    const handleContextMenu = (event: Event) => {\n      if (tree.instance.vnode.props['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree.ctx.emit(\n        'node-contextmenu',\n        event,\n        props.node.data,\n        props.node,\n        instance\n      )\n    }\n\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return\n      if (expanded.value) {\n        tree.ctx.emit('node-collapse', props.node.data, props.node, instance)\n        props.node.collapse()\n      } else {\n        props.node.expand(() => {\n          ctx.emit('node-expand', props.node.data, props.node, instance)\n        })\n      }\n    }\n\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly)\n      nextTick(() => {\n        const store = tree.store.value\n        tree.ctx.emit('check', props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys(),\n        })\n      })\n    }\n\n    const handleChildNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      tree.ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const handleDragStart = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragStart({ event, treeNode: props })\n    }\n\n    const handleDragOver = (event: DragEvent) => {\n      event.preventDefault()\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: { $el: node$.value, node: props.node },\n      })\n    }\n\n    const handleDrop = (event: DragEvent) => {\n      event.preventDefault()\n    }\n\n    const handleDragEnd = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragEnd(event)\n    }\n\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight,\n    }\n  },\n})\n</script>\n"],"names":["getNodeKey","getNodeKeyUtil","_resolveComponent","_withDirectives","_openBlock","_createElementBlock","_normalizeClass","_withModifiers","_createElementVNode","_normalizeStyle","_createBlock","_withCtx","_resolveDynamicComponent","_createCommentVNode","_createVNode","_Fragment","_renderList","_vShow"],"mappings":"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"}